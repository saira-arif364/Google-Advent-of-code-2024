# -*- coding: utf-8 -*-
"""Day 19

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jzLyLVsMazC0VfjuVmwoRmqmsjw3XHGi
"""

from collections import defaultdict, deque


def read_input(file_path):
    with open(file_path, "r") as file:
        lines = file.read().strip().split("\n")

    # Separate towel patterns and desired designs
    towel_patterns = lines[0].split(", ")
    designs = lines[2:]  # Skip the blank line and get designs

    return towel_patterns, designs


def can_form_design(design, towel_patterns):
    # Perform a BFS to check if we can create the design using the patterns
    queue = deque([design])
    seen = set()

    while queue:
        current = queue.popleft()

        if current == "":
            return True

        if current in seen:
            continue
        seen.add(current)

        for pattern in towel_patterns:
            if current.startswith(pattern):
                queue.append(current[len(pattern) :])

    return False


def count_possible_designs(file_path):
    towel_patterns, designs = read_input(file_path)
    possible_count = 0

    for design in designs:
        if can_form_design(design, towel_patterns):
            possible_count += 1

    return possible_count


# Input file path
file_path = "/content/input 19 part 1.txt"

# Count and print the number of possible designs
result = count_possible_designs(file_path)
print(f"Number of possible designs: {result}")

from collections import defaultdict, deque


def read_input(file_path):
    with open(file_path, "r") as file:
        lines = file.read().strip().split("\n")

    # Separate towel patterns and desired designs
    towel_patterns = lines[0].split(", ")
    designs = lines[2:]  # Skip the blank line and get designs

    return towel_patterns, designs


def count_ways_to_form_design(design, towel_patterns):
    # Perform a DFS to count all ways to create the design using the patterns
    memo = {}

    def dfs(remaining):
        if remaining == "":
            return 1

        if remaining in memo:
            return memo[remaining]

        ways = 0
        for pattern in towel_patterns:
            if remaining.startswith(pattern):
                ways += dfs(remaining[len(pattern) :])

        memo[remaining] = ways
        return ways

    return dfs(design)


def total_ways_to_form_designs(file_path):
    towel_patterns, designs = read_input(file_path)
    total_ways = 0

    for design in designs:
        total_ways += count_ways_to_form_design(design, towel_patterns)

    return total_ways


# Input file path
file_path = "/content/input 19part2.txt"

# Count and print the total number of ways to form all designs
result = total_ways_to_form_designs(file_path)
print(f"Total number of ways to form all designs: {result}")