# -*- coding: utf-8 -*-
"""day 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zCx3OUcV5W1GAvURts_FuHAkTxvK5-5V
"""

import re

# Read the input from the file
with open("/content/input 3 part 1.txt", "r") as file:
    data = file.read()

# Regular expression to match valid mul(X,Y) instructions
pattern = r"mul\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)"

# Find all matches of the pattern in the input data
matches = re.findall(pattern, data)

# Calculate the sum of products
result_sum = sum(int(x) * int(y) for x, y in matches)

# Output the result
print(f"The sum of all valid multiplications is: {result_sum}")

import re

def calculate_sum_with_conditions(file_path):
    # Read input data
    with open(file_path, 'r') as file:
        data = file.read()

    # Regular expressions for valid mul and conditional instructions
    mul_pattern = r"mul\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)"
    do_pattern = r"do\(\)"
    dont_pattern = r"don't\(\)"

    # Initialize variables
    enabled = True  # Start with mul enabled
    total_sum = 0

    # Scan through the input for matches
    position = 0
    while position < len(data):
        # Check for "do()" or "don't()" first
        do_match = re.search(do_pattern, data[position:])
        dont_match = re.search(dont_pattern, data[position:])
        mul_match = re.search(mul_pattern, data[position:])

        # Find the earliest match
        earliest = None
        if do_match:
            earliest = ("do", do_match.start() + position)
        if dont_match and (earliest is None or dont_match.start() + position < earliest[1]):
            earliest = ("don't", dont_match.start() + position)
        if mul_match and (earliest is None or mul_match.start() + position < earliest[1]):
            earliest = ("mul", mul_match.start() + position)

        # If no more matches, break
        if not earliest:
            break

        # Process the earliest match
        if earliest[0] == "do":
            enabled = True
            position = earliest[1] + len("do()")
        elif earliest[0] == "don't":
            enabled = False
            position = earliest[1] + len("don't()")
        elif earliest[0] == "mul":
            if enabled:
                # Extract numbers and compute product
                x, y = map(int, mul_match.groups())
                total_sum += x * y
            position = earliest[1] + mul_match.end() - mul_match.start()

    return total_sum

# Example usage:
file_path = "/content/input 3part2.txt"  # Replace with the path to your input file
result = calculate_sum_with_conditions(file_path)
print("Sum of enabled multiplications:", result)