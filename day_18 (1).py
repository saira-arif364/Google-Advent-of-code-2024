# -*- coding: utf-8 -*-
"""Day 18

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jzLyLVsMazC0VfjuVmwoRmqmsjw3XHGi
"""

import numpy as np
from queue import Queue


def bfs_shortest_path(grid, start, goal):
    rows, cols = grid.shape
    queue = Queue()
    queue.put((start, [start]))
    visited = set()
    visited.add(start)

    while not queue.empty():
        (current, path) = queue.get()
        x, y = current

        if current == goal:
            return path

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if (
                0 <= nx < rows
                and 0 <= ny < cols
                and grid[nx, ny] == 0
                and (nx, ny) not in visited
            ):
                queue.put(((nx, ny), path + [(nx, ny)]))
                visited.add((nx, ny))

    return None


grid = np.zeros((71, 71), dtype=int)

with open("/content/input18 part1.txt") as f:
    for i, line in enumerate(f):
        x, y = map(int, line.strip().split(","))
        grid[x, y] = 1

        if i > 1024:
            path = bfs_shortest_path(grid, (0, 0), (70, 70))
            if i == 1025:
                print(len(path) - 1)
            if not path:
                print(x, y)
                break

from collections import deque


def simulate_falling_bytes(grid_size, corrupted_coords, max_bytes):
    # Initialize the grid
    grid = [["." for _ in range(grid_size)] for _ in range(grid_size)]

    # Mark corrupted positions in the grid
    for x, y in corrupted_coords[:max_bytes]:
        grid[y][x] = "#"

    return grid


def find_shortest_path(grid):
    grid_size = len(grid)
    start = (0, 0)
    end = (grid_size - 1, grid_size - 1)

    # BFS initialization
    queue = deque([(start, 0)])  # (current_position, steps)
    visited = set()
    visited.add(start)

    # BFS loop
    while queue:
        (x, y), steps = queue.popleft()

        # Check if we've reached the end
        if (x, y) == end:
            return steps

        # Explore neighbors
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy

            # Check bounds and validity
            if (
                0 <= nx < grid_size
                and 0 <= ny < grid_size
                and (nx, ny) not in visited
                and grid[ny][nx] == "."
            ):
                visited.add((nx, ny))
                queue.append(((nx, ny), steps + 1))

    # If no path found
    return -1


def read_input(file_path):
    with open(file_path, "r") as file:
        lines = file.readlines()
    corrupted_coords = [tuple(map(int, line.strip().split(","))) for line in lines]
    return corrupted_coords


def find_blocking_byte(grid_size, corrupted_coords):
    grid = [["." for _ in range(grid_size)] for _ in range(grid_size)]

    for i, (x, y) in enumerate(corrupted_coords):
        grid[y][x] = "#"
        if find_shortest_path(grid) == -1:
            return x, y

    return None


# Main execution
if __name__ == "__main__":
    input_file = "/content/input18part2.txt"
    corrupted_coords = read_input(input_file)

    grid_size = 71  # Actual grid size

    # Find the first blocking byte
    blocking_byte = find_blocking_byte(grid_size, corrupted_coords)

    # Print the result
    if blocking_byte:
        print(f"{blocking_byte[0]},{blocking_byte[1]}")
    else:
        print("No blocking byte found")